Eloftr

LoFTR(
  (backbone): RepVGG_8_1_align(
    (layer0): RepVGGBlock(
      (nonlinearity): ReLU()
      (se): Identity()
      (rbr_dense): Sequential(
        (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (rbr_1x1): Sequential(
        (conv): Conv2d(1, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer1): ModuleList(
      (0-1): 2 x RepVGGBlock(
        (nonlinearity): ReLU()
        (se): Identity()
        (rbr_identity): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (rbr_dense): Sequential(
          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (rbr_1x1): Sequential(
          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (layer2): ModuleList(
      (0): RepVGGBlock(
        (nonlinearity): ReLU()
        (se): Identity()
        (rbr_dense): Sequential(
          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (rbr_1x1): Sequential(
          (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1-3): 3 x RepVGGBlock(
        (nonlinearity): ReLU()
        (se): Identity()
        (rbr_identity): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (rbr_dense): Sequential(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (rbr_1x1): Sequential(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (layer3): ModuleList(
      (0): RepVGGBlock(
        (nonlinearity): ReLU()
        (se): Identity()
        (rbr_dense): Sequential(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (rbr_1x1): Sequential(
          (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1-13): 13 x RepVGGBlock(
        (nonlinearity): ReLU()
        (se): Identity()
        (rbr_identity): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (rbr_dense): Sequential(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (rbr_1x1): Sequential(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (loftr_coarse): LocalFeatureTransformer(
    (layers): ModuleList(
      (0): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (rope_pos_enc): RoPEPositionEncodingSine()
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (1): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (2): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (rope_pos_enc): RoPEPositionEncodingSine()
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (3): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (4): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (rope_pos_enc): RoPEPositionEncodingSine()
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (5): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (6): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (rope_pos_enc): RoPEPositionEncodingSine()
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (7): AG_RoPE_EncoderLayer(
        (aggregate): Conv2d(256, 256, kernel_size=(4, 4), stride=(4, 4), groups=256, bias=False)
        (max_pool): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
        (q_proj): Linear(in_features=256, out_features=256, bias=False)
        (k_proj): Linear(in_features=256, out_features=256, bias=False)
        (v_proj): Linear(in_features=256, out_features=256, bias=False)
        (attention): Attention()
        (merge): Linear(in_features=256, out_features=256, bias=False)
        (mlp): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=False)
          (1): LeakyReLU(negative_slope=0.01, inplace=True)
          (2): Linear(in_features=512, out_features=256, bias=False)
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
  )
  (coarse_matching): CoarseMatching()
  (fine_preprocess): FinePreprocess(
    (layer3_outconv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (layer2_outconv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (layer2_outconv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1_outconv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (layer1_outconv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.01)
      (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
  (fine_matching): FineMatching()
)